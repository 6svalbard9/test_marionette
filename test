// ici on crée l'objet application
MyApp = new Backbone.Marionette.Application();

/*dans le html,il y a ce div
 * On annonce à l'application que les travaux s'effecturont là
*/
MyApp.addRegions({
  mainRegion: "#content"
});

//Creer l'objet angry cat (un chat)
AngryCat = Backbone.Model.extend({
  //par defaut 0 votes
   defaults: {
    votes: 0
  },
  
  addVote: function(){
    //prendre l'attr votes de lobjet et lincrementer de 1
    this.set('votes', this.get('votes') + 1);
  },

  rankUp: function() {
    this.set({rank: this.get('rank') - 1});
  },
  
  rankDown: function() {
    this.set({rank: this.get('rank') + 1});
  }
});

//creer lobjet angry cats donc qui va contenir les chats
AngryCats = Backbone.Collection.extend({
  // On annonce ici l'utilisation d'un autre modèle
  model: AngryCat,
  /* je pense que l'initialize est un constructeur
   * 
   * En tout cas il prend l'objet Json cats en parametre au bas de la page
  */
  initialize: function(cats){
    // le rank cest pour la suite de lexercice
    var rank = 1;
    // un for each simplifie par underscore
    _.each(cats, function(cat) {
      /*J'ai eu un foutu bug ici à cause que je n'avais pas
       * changé le json en bas en objet Backbone.....
       * le .set permet de rajouter des variables à un objet
       * selon ma compréhension
       */
      cat.set('rank', rank);
      ++rank;
    });
    //si un chat est rajoute sans un rang de base, lancer une erreur
    this.on('add', function(cat){
      if( ! cat.get('rank') ) {
        var error =  Error('Cat must have a rank defined before being added to the collection');
        error.name = 'NoRankError';
        throw error;
      }
    });
    //je pense que cest pcq cest un autre this une fois dans la fonction
    var self = this;
    //ecouter devenements
    MyApp.vent.on("rank:up", function(cat){
      if (cat.get('rank') == 1) {
        // can't increase rank of top-ranked cat
        return true;
      }
      /* comme lobj angryCats est composé d'objets angryCat
      *  il est un peu comme un multidimensional array
      *  donc on augmente le rang du chat et l'on replace l'array
      */
      self.rankUp(cat);
      self.sort();
    });

    MyApp.vent.on("rank:down", function(cat){
      if (cat.get('rank') == self.size()) {
        // can't decrease rank of lowest ranked cat
        return true;
      }
      self.rankDown(cat);
      self.sort();
    });    
  //ici cest un ecouteur pour detruire pour toujours et à jamais un chat
  MyApp.vent.on("cat:disqualify", function(cat){
    //prendre la position du chat detruit
    var disqualifiedRank = cat.get('rank');
   // filter est une methode de underscore que backbone a vole
    var catsToUprank = self.filter(
      //en gros catsToUprank = que les chats au rang plus grand que celui qui est disqualifie
      function(cat){ return cat.get('rank') > disqualifiedRank; }
    );
    //pour chacun dentre eux monter de rang
    catsToUprank.forEach(function(cat){
      cat.rankUp();
    });
    //self.trigger('reset');
  });
  },
  //apparament cela reagit avec le sortby, je dois faire des tests pour ca
  comparator: function(cat) {
    return cat.get('rank');
  },
  
  rankUp: function(cat) {
    // find the cat we're going to swap ranks with
    var rankToSwap = cat.get('rank') - 1;
    //cela agit comme .getChildAt(x) en as3
    var otherCat = this.at(rankToSwap - 1);
    
    // swap ranks
    cat.rankUp();
    otherCat.rankDown();
  },
  
  rankDown: function(cat) {
    // find the cat we're going to swap ranks with
    var rankToSwap = cat.get('rank') +1;
    var otherCat = this.at(rankToSwap - 1);
    
    // swap ranks
    cat.rankDown();
    otherCat.rankUp();
  }
});

// chercher la template dans l'html
AngryCatView = Backbone.Marionette.ItemView.extend({
  template: "#angry_cat-template",
  tagName: 'tr',
  className: 'angry_cat',
  
  events: {
    'click .rank_up img': 'rankUp',
    'click .rank_down img': 'rankDown',
    'click a.disqualify': 'disqualify'
  },
//ici cest à updater pour la version actuelle!!
  initialize: function(){
    //rajouter une fonction
    this.bindTo(this.model, "change:votes", this.render, this);
  },
//ici je guess que cest pour enlever lecouteur
  onClose: function(){
  this.model.unbind('change:votes', this.render);
  },
  
  rankUp: function(){

    this.model.addVote();
    MyApp.vent.trigger("rank:up", this.model);
  },
  
  rankDown: function(){

    this.model.addVote();
    MyApp.vent.trigger("rank:down", this.model);
  },
  disqualify: function(){
    //appeler levenement disqualifier
    MyApp.vent.trigger("cat:disqualify",this.model);
    this.model.destroy();
  }
});

//ici c'est la même chose, mais pour le conteneur
AngryCatsView = Backbone.Marionette.CompositeView.extend({
  //le tag où il apparaitra ainsi que ses attributs
  tagName: "table",
  id: "angry_cats",
  className: "table-striped table-bordered",
  template: "#angry_cats-template",
  /* Je ne comprends pas la suite
   * Comment cela fonctionne?
   * Je dois comprendre d'ici ce soir
  */
  itemView: AngryCatView,
  appendHtml: function(collectionView, itemView){
    collectionView.$("tbody").append(itemView.el);
  }
});

//je suppose que c'est pour ce qui doit se realiser au chargement
MyApp.addInitializer(function(options){
  var angryCatsView = new AngryCatsView({
    //pourquoi options.cats ???
    collection: options.cats
  });
  //faire apparaitre lobjet dans l'html je suppose
  MyApp.mainRegion.show(angryCatsView);
});

$(document).ready(function(){
  //creer un objet à objet #fun
  var cats = new AngryCats([
    new AngryCat({ name: 'Wet Cat', image_path: 'assets/images/cat2.jpg' }),
    new AngryCat({ name: 'Bitey Cat', image_path: 'assets/images/cat1.jpg' }),
    new AngryCat({ name: 'Surprised Cat', image_path: 'assets/images/cat3.jpg' })
  ]);
  //commencer l'application après avoirr pris les données

  //ici cest rajouter un chat apres lapplication juste pour la passion de la pedagogie
  MyApp.start({cats: cats});

    cats.add(new AngryCat({
   
    name: 'Cranky Cat',
   
    image_path: 'assets/images/cat4.jpg',
   
    rank: cats.size() + 1
   
  }));
});

//OUF!

